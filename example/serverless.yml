  component: multi-scf
  name: web-record
  app: ${env:NAME}
  inputs:
    src:
      src: ./
      exclude:
        - .env
        - record/**
        - node_modules/**
        - transcode/**
        - docker/**
        - dist/**
        - scripts/**
    region: '${env:REGION}'
    runtime: Nodejs12.16
    role: SCF_QcsRole
    memorySize: 256
    isAutoPublish: true
    timeout: 90
    msgTTL: 21600
    retryNum: 0
    vpc:
      vpcId: '${env:VPC_ID}'
      subnetId: '${env:SUBNET_ID}'
    environments:
      - key: SLS_APP_NAME
        value: '${app}'
      - key: ENV
        value: '${env:ENV}'
      - key: APP_VERSION
        value: '${env:APP_VERSION}'
      - key: VPC_ID
        value: '${env:VPC_ID}'
      - key: SUBNET_ID
        value: '${env:SUBNET_ID}'
      - key: REGION
        value: '${env:REGION}'
      - key: COS_BUCKET
        value: '${env:COS_BUCKET}'
      - key: CDN_DOMAIN
        value: '${env:CDN_DOMAIN}'
      - key: REDIS_HOST
        value: '${env:REDIS_HOST}'
      - key: REDIS_PORT
        value: '${env:REDIS_PORT}'
      - key: REDIS_AUTH
        value: '${env:REDIS_AUTH}'
      - key: REDIS_INDEX
        value: '${env:REDIS_INDEX}'
      - key: CFS_ID
        value: '${env:CFS_ID}'
      - key: MOUNT_ID
        value: '${env:MOUNT_ID}'
      - key: RECORD_IMAGE_URL
        value: '${env:RECORD_IMAGE_URL}'
      - key: REGISTRY_ID
        value: '${env:REGISTRY_ID}'
      - key: TRANSCODE_IMAGE_URL
        value: '${env:TRANSCODE_IMAGE_URL}'
    functions:
      callback:
        name: '${app}-callback'
        src: ./callback
        handler: index.main_handler
        memorySize: 512
        asyncRunEnable: true
        traceEnable: true
      upload:
        name: '${app}-upload'
        src: ./upload
        handler: index.main_handler
        memorySize: 512
        timeout: 7200
        asyncRunEnable: true
        traceEnable: true
        cfs:
          - cfsId: '${env:CFS_ID}'
            mountInsId: '${env:MOUNT_ID}'
            localMountDir: /mnt/
            remoteMountDir: /
      transcode:
        name: '${app}-transcode'
        memorySize: 3072
        timeout: 7200
        asyncRunEnable: true
        traceEnable: true
        image:
          imageUrl: '${env:TRANSCODE_IMAGE_URL}'
          imageType: public
          registryId: '${env:REGISTRY_ID}'
        cfs:
          - cfsId: '${env:CFS_ID}'
            mountInsId: '${env:MOUNT_ID}'
            localMountDir: /mnt/
            remoteMountDir: /
      record:
        name: '${app}-record'
        memorySize: 3072
        timeout: 86400
        asyncRunEnable: true
        traceEnable: true
        image:
          imageUrl: '${env:RECORD_IMAGE_URL}'
          imageType: public
          registryId: '${env:REGISTRY_ID}'
        cfs:
          - cfsId: '${env:CFS_ID}'
            mountInsId: '${env:MOUNT_ID}'
            localMountDir: /mnt/
            remoteMountDir: /
      dispatch:
        name: '${app}-dispatch'
        memorySize: 256
        src: ./dispatch
        handler: index.main_handler
      diagnose:
        name: '${app}-diagnose'
        memorySize: 256
        timeout: 150
        src: ./diagnose
        handler: index.main_handler
    triggers:
      - type: timer
        function: dispatch
        parameters:
          name: dispatch_timer
          cronExpression: 0 */10 * * * * *
          enable: true
          argument: Active
      - type: timer
        function: diagnose
        parameters:
          name: diagnose_timer
          cronExpression: '*/30 * * * * * *'
          enable: true
          argument: argument
      - type: timer
        function: record
        parameters:
          name: record_timer
          cronExpression: 0 */10 * * * * *
          enable: true
          argument: Active
      - type: apigw
        parameters:
          name: web_record
          protocols:
            - http
            - https
          description: Serverless web-record API GW
          environment: release
          apis:
            - path: /record
              apiName: dispatch_api
              method: POST
              description: Serverless REST API
              enableCORS: true
              responseType: JSON
              serviceTimeout: 90
              authType: APP
              function: dispatch
